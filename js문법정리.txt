//console.log(); 콘솔에 값을 출력
// const, let 변수 설정
// const 와 let의 차이 const 로 생성한 변수는 업데이트 할 수없다.
// 주로 const 를 사용
// true false -> 로그인을 했는가 안 했는가? 등을 확인할때 사용
// null 비어있다
//배열명.push(추가값); -> 배열에 추가하기
// object 설명이 필요한 정보는 object로
// const player = {
//   name: "caron",
//   points: 10,
//   fat: true,
// };
// console.log(player);
// console.log(player["name"]);
// player.lastName = "potato";
// player.points = player.points + 15;
// console.log(player.points);

// 함수 만들기 object 안에서 함수는 함수명이 
// const player = {
//   name : "caron",
//   sayHello: function(otherPersonName){
//     console.log("hello " + otherPersonName + "nice to meet you");
//   },
// };
// console.log(player.name);
// player.sayHello("lynn");


계산기 만들기
const calcultor = {
  add: function(a, b){
    console.log(a + b);
  },
  minus: function(a, b){
    console.log(a - b);
  },
  div: function(a, b){
    console.log(a / b);
  },
  multi: function(a, b){
    console.log(a * b);
  },
};

calcultor.add(2, 3);
calcultor.minus(23, 58);
calcultor.div(234, 54);
calcultor.multi(23, 45);

return 하는 방법

const age = 20;
function calculateKrAge(ageOfForeigner) {
  return ageOfForeigner + 2;
}

const krAge = calculateKrAge(age);
console.log(krAge);

//prompt 사용자에게 응답을 받을 수있다. input과 비슷/ 사용은 잘 안함
//타입 보는 방법 / typeof 변수명
//타입 변경 방법 / parseInt();
const age = parseInt(prompt("How old are you?"));

console.log(age);


//NaN == Not a Number
// if문 condition은 boolean이여야 한다
// and 연산자 &&, or 연산자 ||
const age =parseInt(prompt("How old are you?"));
//parseInt("문자") => NaN 값을 준다
if (isNaN(age) || age < 0) {
  age2 = parseInt(prompt("Please write a real positive number"));
  if (!isNaN(age2)) { // ! == not의 개념
    if (age2 < 18) {
      console.log("You are too young.");
    } else if (age2 < 50) {
      console.log("you great");
    } else {
      console.log("you are too living.");
    }
    
  }
} else {
  console.log("Thank you for writing your age")
}

// 불 연산자 
// == Equal operator
// 1 == "1" => true / 값이 같으면 true
// === Strict Equal operator
// 1 === "1" => false // 모든게 같아야지 true
// !== 같지 않다

-------------------------------------------------------------------------
// document == HTML코드
// document.title = "Hello! From JS!"; -> document 제목이 변경됨
// document.getElementById("title") -> html에서 id가 title인 요소의 값을 가져온다(배열로 가져온다)
const title = document.getElementById("title")

title.innerText = "Got you!";

console.log(title.id);
console.log(title.className);


// 보통 id 보다 class를 많이 사용

const hellos = document.getElementsByClassName("hello");

console.log(hellos);
// 실행결과 
// HTMLCollection(5) [h1.hello, h1.hello, h1.hello, h1.hello, h1.hello]
// 배열로 가져온다

------------------------------------------------------------------------
//tagname == h1, div, class 등 
//querySelector = element를 css 방식으로 검색할 수 있다.

const title = document.querySelector(".hello h1");
// .hello 에서 .은 class를 뜻 한다
// hello 안에 있는 h1을 가져온다
// 첫 번째 요소값만 가져온다
// querySelector("#hello"); -> #은 id를 뜻한다
const allTitle = document.querySelectorAll(".hello h1");
// 모든 h1요소들을 가져온다

console.log(title);
console.log(allTitle);
-------------------------------------------------------------------------
const title = document.querySelector(".hello h1");

function handleTitleClick() {
  title.style.color = "red";
}


title.addEventListener("click", handleTitleClick);
// addEventlistener = event가 발생을 감지
// addEventListener("event", event가 발생 했을 때 하고 싶은 행위);
--------------------------------------------------------------------------

listen 하고싶은 element 찾는 방법
크롬에 "element 이름" html element mdn 검색

title.addEventListener("click", handleTitleClick);
-> title.onclick = handleTitleClick;  같은 의미


//window는 기본제공
window.addEventListener("resize", handlewindowResize);
window.addEventListener("copy", handleWindowCopy);
window.addEventListener("offline", handleWindowOffline);
window.addEventListener("online", handleWindowOnline);
-------------------------------------------------------------------------
title을 click 했을 때 색변화

const h1 = document.querySelector(".hello h1");

function handleTitleClick() {
  const currentColor = h1.style.color;
  let newColor;
  if (currentColor === "blue") {
    newColor = "tomato";
    
  } else {
    newColor = "blue";
  }
  h1.style.color = newColor;
}
h1.addEventListener("click", handleTitleClick);

------------------------------------------------------------------------
const h1 = document.querySelector(".hello h1");

function handleTitleClick() {
  const clickedClass = "clicked" //반복되는 raw string은 변수로 정해주는것이 좋다
  if (h1.classList.contains(clickedClass)) { // h1에 clicked라는 class를 포함하고 있다면
    h1.classList.remove(clickedClass); // classList 에서 clicked를 제거해라
  } else {
    h1.classList.add(clickedClass); // classList 에서 clicked를 추가해라
  }
}

h1.addEventListener("click", handleTitleClick);


위의 if문을 
  h1.classList.toggle("clicked"); //classList에 clicked이 있으면 제거 없으면 추가
toggle함수를 이용하면 한줄로 줄일 수 있다. 
-------------------------------------------------------------------------

const loginForm = document.querySelector("#login-form");
const loginInput = document.querySelector("#login-form input");

function onLogInSubmit(event) {
  event.preventDefault(); //예전된 event를 막아준다
  console.log(loginInput.value);
}

loginForm.addEventListener("submit", onLogInSubmit);
// onLogInSubmit 함수를 호출 할때 event object를 담은 정보를 인수로 받고 호출
---------------------------------------------------------------------------